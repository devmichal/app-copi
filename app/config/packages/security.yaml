security:
    encoders:
        App\Core\Domain\Model\Users\User: bcrypt
    providers:
        app_user_provider:
            entity:
                class: App\Core\Domain\Model\Users\User
                property: username
    firewalls:
        create_token:
            pattern: ^/api/auth-token
            stateless: true
            anonymous: true
        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            user_checker: App\Core\Infrastructure\Security\UserStatusEnabled
        api:
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
            # main:
            #    anonymous: true
            #    lazy: true
            #    provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
